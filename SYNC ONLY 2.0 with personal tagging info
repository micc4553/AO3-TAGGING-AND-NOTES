// ==UserScript==
// @name         AO3 Sync Manager
// @version      1.0
// @description  Sync AO3 tagging and notes data across devices using Google Apps Script
// @match        https://archiveofourown.org/*
// @icon         https://archiveofourown.org/favicon.ico
// @grant        GM_xmlhttpRequest
// ==/UserScript==

(function () {
    "use strict";

    // Constants for storage keys
    const KEYS = {
        LABELS: "ao3_fic_labels",
        NOTES: "ao3_fic_notes",
        AUTHOR_NOTES: "ao3_author_notes",
        SETTINGS: "ao3_sync_settings",
        LAST_SYNC: "ao3_last_sync",
        LAST_SYNCED_NOTES: "ao3_last_synced_notes",
        LAST_SYNCED_AUTHOR_NOTES: "ao3_last_synced_author_notes",
        LAST_SYNCED_LABELS: "ao3_last_synced_labels",
        DELETED_LABELS: "ao3_deleted_labels",
        DELETED_NOTES: "ao3_deleted_notes",
        DELETED_AUTHOR_NOTES: "ao3_deleted_author_notes"
      PERSONAL_TAGS: "ao3_personal_tags",
    TAG_TO_WORKS: "ao3_tag_to_works"
    };

    // Storage utility functions
    class Storage {
        static load(key, fallback = {}) {
            try {
                return JSON.parse(localStorage.getItem(key) || JSON.stringify(fallback));
            } catch {
                return fallback;
            }
        }

        static save(key, value) {
            localStorage.setItem(key, JSON.stringify(value));
        }

        static loadLabels() { return this.load(KEYS.LABELS); }
        static saveLabels(v) { this.save(KEYS.LABELS, v); }
        static loadNotes() { return this.load(KEYS.NOTES); }
        static saveNotes(v) { this.save(KEYS.NOTES, v); }
        static loadAuthorNotes() { return this.load(KEYS.AUTHOR_NOTES); }
        static saveAuthorNotes(v) { this.save(KEYS.AUTHOR_NOTES, v); }
        static loadSyncSettings() { return this.load(KEYS.SETTINGS); }
        static saveSyncSettings(v) { this.save(KEYS.SETTINGS, v); }
        static loadDeletedLabels() { return this.load(KEYS.DELETED_LABELS); }
        static saveDeletedLabels(v) { this.save(KEYS.DELETED_LABELS, v); }
        static loadDeletedNotes() { return this.load(KEYS.DELETED_NOTES); }
        static saveDeletedNotes(v) { this.save(KEYS.DELETED_NOTES, v); }
        static loadDeletedAuthorNotes() { return this.load(KEYS.DELETED_AUTHOR_NOTES); }
        static saveDeletedAuthorNotes(v) { this.save(KEYS.DELETED_AUTHOR_NOTES, v); }
      static loadPersonalTags() { return this.load(KEYS.PERSONAL_TAGS); }
static savePersonalTags(v) { this.save(KEYS.PERSONAL_TAGS, v); }
static loadTagToWorks() { return this.load(KEYS.TAG_TO_WORKS); }
static saveTagToWorks(v) { this.save(KEYS.TAG_TO_WORKS, v); }
    }

    // Validation utilities
    const Validator = {
        isValidWorkId(id) {
            if (!id || typeof id !== "string") return false;
            if (id.includes('null') || id.includes('undefined') || id.includes('NaN')) return false;
            if (id.trim() === '' || id.length > 200) return false;
            return /^(bookmark_\d+|\d+|work_\d+)$/.test(id) || /bookmark_\d+/.test(id);
        },

        isValidAuthorId(id) {
            if (!id || typeof id !== "string") return false;
            if (id.includes('null') || id.includes('undefined') || id.includes('NaN')) return false;
            if (id.trim() === '' || /^\d+$/.test(id) || id.length > 100) return false;
            return /^[a-zA-Z0-9_-]+(_[a-zA-Z0-9_-]+)?$/.test(id);
        }
    };

    // UI Utilities
    const UI = {
        formatDateTime: (d) => d.toLocaleString(undefined, {
            year: "numeric", month: "short", day: "numeric",
            hour: "2-digit", minute: "2-digit"
        }),

        createButton(text, styles = {}, onclick = null) {
            const btn = document.createElement("button");
            btn.textContent = text;
            Object.assign(btn.style, {
                padding: "6px 12px",
                border: "none",
                borderRadius: "4px",
                cursor: "pointer",
                ...styles
            });
            if (onclick) btn.addEventListener("click", onclick);
            return btn;
        },

        createModal(content, title = "") {
            const modal = document.createElement("div");
            modal.innerHTML = `
                <div style="position:fixed;top:0;left:0;width:100%;height:100%;background:rgba(0,0,0,0.7);z-index:100000;display:flex;align-items:center;justify-content:center;">
                    <div style="background:#232136CC;color:#fff;padding:20px;border-radius:8px;max-width:90%;max-height:80%;border:1px solid #ddd;overflow-y:auto;">
                        ${title ? `<h3 style="margin-top:0;color:#fff;">${title}</h3>` : ""}
                        ${content}
                    </div>
                </div>
            `;
            document.body.appendChild(modal);

            // Close on backdrop click
            modal.addEventListener("click", (e) => {
                if (e.target === modal || e.target.style.background?.includes("rgba")) {
                    modal.remove();
                }
            });

            return modal;
        },

        addHoverEffect(element, hoverStyles = {}, normalStyles = {}) {
            element.addEventListener("mouseenter", () => Object.assign(element.style, hoverStyles));
            element.addEventListener("mouseleave", () => Object.assign(element.style, normalStyles));
        }
    };

    // Google Sync Manager
    class GoogleSyncManager {
        constructor() {
            this.settings = Storage.loadSyncSettings();
            this.syncInterval = (this.settings.syncInterval || 60) * 1000;
            this.isSyncing = false;
            this.syncTimer = null;
            this.timeUntilNextSync = 0;

            if (this.settings.enabled && this.settings.sheetUrl) {
                this.initSync();
            }
        }

        initSync() {
            this.startSyncTimer();
            this.createSyncWidget();
        }

        createSyncWidget() {
            if (document.getElementById("ao3-sync-widget")) return;

            const widget = document.createElement("div");
            widget.id = "ao3-sync-widget";
            widget.style.cssText = `
                position:fixed; bottom:15px; left:10px; z-index:10000;
                display:flex; align-items:center; gap:4px; padding:3px 5px;
                background:#fff; border:1px solid #ddd; border-radius:16px;
                cursor:pointer; font:12px sans-serif; color:#666;
                box-shadow:0 2px 8px rgba(0,0,0,0.1); transition:all 0.2s;
                opacity:${this.settings.syncWidgetOpacity || 0.5};
            `;

            widget.innerHTML = `
                <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M21.5 2v6h-6M2.5 22v-6h6M2 11.5a10 10 0 0 1 18.8-4.3M22 12.5a10 10 0 0 1-18.8 4.2"/>
                </svg>
                <span id="sync-status">Sync</span>
                <span id="sync-countdown" style="font-size:11px;color:#999;margin-left:4px;">0s</span>
            `;

            document.body.appendChild(widget);

            widget.addEventListener("click", () => {
                if (!this.isSyncing) this.performSync();
            });

            UI.addHoverEffect(widget,
                { opacity: "1", background: "#f8f9fa", borderColor: "#0066cc", transform: "translateY(-1px)" },
                { opacity: "0.5", background: "#fff", borderColor: "#ddd", transform: "" }
             );

            this.startCountdownTimer();
        }

        startSyncTimer() {
            if (this.syncTimer) clearInterval(this.syncTimer);

            const lastSync = parseInt(localStorage.getItem(KEYS.LAST_SYNC)) || 0;
            const timeSinceLastSync = Date.now() - lastSync;
            const timeUntilNextSync = Math.max(0, this.syncInterval - timeSinceLastSync);

            this.timeUntilNextSync = Math.ceil(timeUntilNextSync / 1000);

            if (timeUntilNextSync <= 0) {
                this.performSync();
                this.timeUntilNextSync = this.syncInterval / 1000;
            }

            this.syncTimer = setInterval(() => {
                this.timeUntilNextSync = this.syncInterval / 1000;
                this.performSync();
            }, this.syncInterval);
        }

        startCountdownTimer() {
            setInterval(() => {
                if (this.timeUntilNextSync > 0) this.timeUntilNextSync--;
                this.updateWidget();
            }, 1000);
        }

        updateWidget(status = "idle") {
            const widget = document.getElementById("ao3-sync-widget");
            if (!widget) return;

            const statusText = widget.querySelector("#sync-status");
            const countdown = widget.querySelector("#sync-countdown");

            let countdownText = this.timeUntilNextSync > 0
                ? this.timeUntilNextSync > 60
                    ? `${Math.floor(this.timeUntilNextSync / 60)}m ${this.timeUntilNextSync % 60}s`
                    : `${this.timeUntilNextSync}s`
                : "now";

            switch (status) {
                case "syncing":
                    statusText.textContent = "Syncing...";
                    countdown.textContent = "";
                    widget.style.background = "#e3f2fd";
                    break;
                case "success":
                    statusText.textContent = "Synced!";
                    countdown.textContent = "";
                    widget.style.background = "#e8f5e8";
                    setTimeout(() => this.updateWidget(), 3000);
                    break;
                case "error":
                    statusText.textContent = "Error";
                    countdown.textContent = "";
                    widget.style.background = "#ffebee";
                    setTimeout(() => this.updateWidget(), 3000);
                    break;
                default:
                    statusText.textContent = "Sync";
                    countdown.textContent = countdownText;
                    widget.style.background = "#fff";
                    break;
            }
        }

        async performSync() {
            if (this.isSyncing || !this.settings.sheetUrl) return;

            this.isSyncing = true;
            this.updateWidget("syncing");

            try {
                const syncData = {
                    action: "sync",
                    data: {
                        labels: localStorage.getItem(KEYS.LABELS) || "{}",
                        notes: localStorage.getItem(KEYS.NOTES) || "{}",
                        authorNotes: localStorage.getItem(KEYS.AUTHOR_NOTES) || "{}",
                        deletedNotes: Object.keys(Storage.loadDeletedNotes()),
                        deletedAuthorNotes: Object.keys(Storage.loadDeletedAuthorNotes()),
                        deletedLabels: Object.keys(Storage.loadDeletedLabels()),
                        timestamp: Date.now(),
                      personalTags: localStorage.getItem(KEYS.PERSONAL_TAGS) || "{}",
tagToWorks: localStorage.getItem(KEYS.TAG_TO_WORKS) || "{}",
                    },
                };

                const response = await this.sendRequest(syncData);

                if (response.success) {
                    if (response.data) {
                        this.mergeData(response.data);
                    }
                    localStorage.setItem(KEYS.LAST_SYNC, Date.now().toString());
                    this.timeUntilNextSync = this.syncInterval / 1000;
                    this.updateWidget("success");
                } else {
                    throw new Error(response.error || "Sync failed");
                }
            } catch (error) {
                console.error("[AO3 Sync] Error:", error);
                this.updateWidget("error");
            } finally {
                this.isSyncing = false;
            }
        }

        sendRequest(data) {
            return new Promise((resolve, reject) => {
                GM_xmlhttpRequest({
                    method: "POST",
                    url: this.settings.sheetUrl,
                    headers: { "Content-Type": "application/json" },
                    data: JSON.stringify(data),
                    timeout: 15000,
                    onload: (response) => {
                        try {
                            resolve(JSON.parse(response.responseText));
                        } catch {
                            reject(new Error("Invalid response"));
                        }
                    },
                    onerror: () => reject(new Error("Network error")),
                    ontimeout: () => reject(new Error("Request timeout"))
                });
            });
        }

        mergeData(serverData) {
            // Merge labels
            if (serverData.labels) {
                const currentLabels = Storage.loadLabels();
                const serverLabels = JSON.parse(serverData.labels);
                const mergedLabels = { ...currentLabels };

                Object.entries(serverLabels).forEach(([id, tag]) => {
                    if (Validator.isValidWorkId(id) && !currentLabels[id]) {
                        mergedLabels[id] = tag;
                    }
                });

                Storage.saveLabels(mergedLabels);
            }

            // Merge notes
            if (serverData.notes) {
                const currentNotes = Storage.loadNotes();
                const serverNotes = JSON.parse(serverData.notes);
                const mergedNotes = { ...currentNotes };

                Object.entries(serverNotes).forEach(([id, note]) => {
                    if (Validator.isValidWorkId(id) && !currentNotes[id]) {
                        mergedNotes[id] = note;
                    }
                });

                Storage.saveNotes(mergedNotes);
            }

            // Merge author notes
            if (serverData.authorNotes) {
                const currentAuthorNotes = Storage.loadAuthorNotes();
                const serverAuthorNotes = JSON.parse(serverData.authorNotes);
                const mergedAuthorNotes = { ...currentAuthorNotes };

                Object.entries(serverAuthorNotes).forEach(([id, note]) => {
                    if (Validator.isValidAuthorId(id) && !currentAuthorNotes[id]) {
                        mergedAuthorNotes[id] = note;
                    }
                });

                Storage.saveAuthorNotes(mergedAuthorNotes);
            }

          // Merge personal tags
if (serverData.personalTags) {
    const currentPersonalTags = Storage.loadPersonalTags();
    const serverPersonalTags = JSON.parse(serverData.personalTags);
    const mergedPersonalTags = { ...currentPersonalTags, ...serverPersonalTags };
    Storage.savePersonalTags(mergedPersonalTags);
}

// Merge tag to works mapping
if (serverData.tagToWorks) {
    const currentTagToWorks = Storage.loadTagToWorks();
    const serverTagToWorks = JSON.parse(serverData.tagToWorks);
    const mergedTagToWorks = { ...currentTagToWorks, ...serverTagToWorks };
    Storage.saveTagToWorks(mergedTagToWorks);
}
        }
    }

    // Cleanup utilities
    function cleanupInvalidEntries() {
        const labels = Storage.loadLabels();
        const notes = Storage.loadNotes();
        const authorNotes = Storage.loadAuthorNotes();

        const validLabels = {};
        const validNotes = {};
        const validAuthorNotes = {};

      const personalTags = Storage.loadPersonalTags();
const tagToWorks = Storage.loadTagToWorks();
const validPersonalTags = {};
const validTagToWorks = {};

        let removedLabels = 0;
        let removedNotes = 0;
        let removedAuthorNotes = 0;

        Object.entries(labels).forEach(([id, label]) => {
            if (Validator.isValidWorkId(id)) {
                validLabels[id] = label;
            } else {
                removedLabels++;
            }
        });

        Object.entries(notes).forEach(([id, note]) => {
            if (Validator.isValidWorkId(id)) {
                validNotes[id] = note;
            } else {
                removedNotes++;
            }
        });

        Object.entries(authorNotes).forEach(([id, note]) => {
            if (Validator.isValidAuthorId(id)) {
                validAuthorNotes[id] = note;
            } else {
                removedAuthorNotes++;
            }
        });

      / Add validation logic for these new data types
Object.entries(personalTags).forEach(([id, tags]) => {
    if (Validator.isValidWorkId(id)) {
        validPersonalTags[id] = tags;
    }
});

Object.entries(tagToWorks).forEach(([tag, works]) => {
    const validWorks = {};
    Object.entries(works).forEach(([workId, workData]) => {
        if (Validator.isValidWorkId(workId)) {
            validWorks[workId] = workData;
        }
    });
    if (Object.keys(validWorks).length > 0) {
        validTagToWorks[tag] = validWorks;
    }
});

        Storage.saveLabels(validLabels);
        Storage.saveNotes(validNotes);
        Storage.saveAuthorNotes(validAuthorNotes);
Storage.savePersonalTags(validPersonalTags);
Storage.saveTagToWorks(validTagToWorks);

        return { removedLabels, removedNotes, removedAuthorNotes };
    }

    // Settings panel
    function createSettingsPanel() {
        const settings = Storage.loadSyncSettings();

        const modal = UI.createModal(`
            <div style="max-width:500px;">
                <div style="margin:15px 0;">
                    <button id="cleanup-storage" style="background:#ff9800;color:white;border:none;padding:8px 12px;border-radius:4px;cursor:pointer;">Clean Up Storage</button>
                </div>

                <div style="margin:15px 0;">
                    <label style="color:#fff;display:flex;align-items:center;gap:8px;margin:20px 0;">
                        <input type="checkbox" id="sync-enabled" ${settings.enabled ? "checked" : ""}>
                        Enable Google Sync
                    </label>
                    <label style="display:block;margin:20px 0;color:#fff;">
                        Apps Script URL:
                        <input type="text" id="sheet-url" value="${settings.sheetUrl || ""}"
                               style="width:100%;padding:6px;margin-top:10px;border:1px solid #ccc;border-radius:8px;">
                    </label>
                    <label style="display:block;margin:20px 0;color:#fff;">
                        Sync Interval (seconds):
                        <input type="number" id="sync-interval" value="${settings.syncInterval || 60}"
                               min="30" max="3600" style="width:80px;padding:6px;margin-top:4px;border:1px solid #ccc;border-radius:8px;">
                    </label>
                    <label style="display:block;margin:20px 0;color:#fff;">
                        Widget Opacity:
                        <input type="range" id="widget-opacity" value="${settings.syncWidgetOpacity || 0.5}"
                               min="0.1" max="1" step="0.1" style="width:100%;margin-top:4px;">
                        <span id="opacity-value">${settings.syncWidgetOpacity || 0.5}</span>
                    </label>
                </div>

                <div style="display:flex;gap:10px;margin-top:20px;">
                    <button id="save-settings" style="background:#4CAF50;color:white;border:none;padding:8px 16px;border-radius:4px;cursor:pointer;flex:1;">Save Settings</button>
                    <button id="close-settings" style="background:#666;color:white;border:none;padding:8px 16px;border-radius:4px;cursor:pointer;flex:1;">Close</button>
                </div>
            </div>
        `, "Sync Settings");

        // Opacity slider update
        const opacitySlider = modal.querySelector("#widget-opacity");
        const opacityValue = modal.querySelector("#opacity-value");
        opacitySlider.addEventListener("input", () => {
            opacityValue.textContent = opacitySlider.value;
        });

        // Event listeners
        modal.querySelector("#cleanup-storage").addEventListener("click", () => {
            const result = cleanupInvalidEntries();
            alert(`Cleanup complete!\nRemoved: ${result.removedLabels} labels, ${result.removedNotes} notes, ${result.removedAuthorNotes} author notes`);
        });

        modal.querySelector("#save-settings").addEventListener("click", () => {
            const newSettings = {
                ...settings,
                enabled: modal.querySelector("#sync-enabled").checked,
                sheetUrl: modal.querySelector("#sheet-url").value,
                syncInterval: parseInt(modal.querySelector("#sync-interval").value),
                syncWidgetOpacity: parseFloat(modal.querySelector("#widget-opacity").value)
            };
            Storage.saveSyncSettings(newSettings);
            alert("Settings saved! Please reload the page for changes to take effect.");
            modal.remove();
        });

        modal.querySelector("#close-settings").addEventListener("click", () => {
            modal.remove();
        });
    }

    // Add sync settings button to navigation
    function addSyncButton() {
        const nav = document.querySelector("ul.primary.navigation.actions") ||
                   document.querySelector("ul.primary.navigation") ||
                   document.querySelector("nav ul");

        if (!nav || document.querySelector("#sync-settings-btn")) return;

        const syncLi = document.createElement("li");
        syncLi.innerHTML = '<a href="#" id="sync-settings-btn">Sync</a>';
        nav.appendChild(syncLi);

        syncLi.querySelector("a").addEventListener("click", (e) => {
            e.preventDefault();
            createSettingsPanel();
        });
    }

    // Initialize sync manager
    function initSyncManager() {
        // Clean up invalid entries on startup
        cleanupInvalidEntries();

        // Add sync button to navigation
        addSyncButton();

        // Initialize sync manager if enabled
        const settings = Storage.loadSyncSettings();
        if (settings.enabled && settings.sheetUrl) {
            new GoogleSyncManager();
        }
    }

    // Run initialization
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initSyncManager);
    } else {
        initSyncManager();
    }

})();
